{
    "1600": {
        "file_id": 207,
        "content": "/tsalib_test.py",
        "type": "filepath"
    },
    "1601": {
        "file_id": 207,
        "content": "Code comments:\n1. Declare dimension variables (e.g., 'Batch(b):32') and use the shorthand ('b') in the rest of the code.\n2. Create tensors using dimension variables as integers.\n3. Perform tensor transformations, keeping track of named shapes ('b,c,h//2,w//2').\n4. Check assertions: compare dynamic shapes with declared shapes (symbolic).\n5. Use size_assert to check selected dimensions.\n6. Torch tensor is created but not statically checked for correct shape due to names attribute.",
        "type": "summary"
    },
    "1602": {
        "file_id": 207,
        "content": "from tsalib import dim_vars as dvs, size_assert\nimport tensorflow as tf\nimport torch\n# declare dimension variables. e.g., full name 'Batch', shorthand 'b', length 32.\n# Simply use the shorthand 'b' in rest of the code.\nB, C, H, W = dvs('Batch(b):32 Channels(c):3 Height(h):256 Width(w):256') \n...\n# create tensors using dimension variables (interpret dim vars as integers)\nx: 'bchw' = torch.randn(B, C, H, W)\nx: 'bchw' = tf.get_variable(\"x\", shape=(B, C, H, W), initializer=tf.random_normal_initializer())\n# perform tensor transformations, keep track of named shapes\nx: 'b,c,h//2,w//2' = maxpool(x) \n# check assertions: compare dynamic shapes with declared shapes\n# assertions are 'symbolic': don't change even if declared shapes change\nassert x.size() == (B, C, H // 2, W // 2)\n#or, check selected dimensions\nsize_assert(x.size(), (B,C,H//2,W//2), dims=[1,2,3])\nmytensor = torch.randn(1, 2, 2, 3 , names=('N', 'C', 'H', 'W')) # still, not annotated. cannot check statically?",
        "type": "code",
        "location": "/tsalib_test.py:1-21"
    },
    "1603": {
        "file_id": 207,
        "content": "Code comments:\n1. Declare dimension variables (e.g., 'Batch(b):32') and use the shorthand ('b') in the rest of the code.\n2. Create tensors using dimension variables as integers.\n3. Perform tensor transformations, keeping track of named shapes ('b,c,h//2,w//2').\n4. Check assertions: compare dynamic shapes with declared shapes (symbolic).\n5. Use size_assert to check selected dimensions.\n6. Torch tensor is created but not statically checked for correct shape due to names attribute.",
        "type": "comment"
    },
    "1604": {
        "file_id": 208,
        "content": "/ubuntu_qemu_utm_arm_record/README.md",
        "type": "filepath"
    },
    "1605": {
        "file_id": 208,
        "content": "The code provides instructions for setting up a recording environment, installing software packages, and ensuring display settings. However, it seems incomplete as it only briefly mentions preventing deadlocks without further explanation or detail.",
        "type": "summary"
    },
    "1606": {
        "file_id": 208,
        "content": "you need to make all scripts under this folder read-only.\nmount folder related to recordings separately.\nso you need to mount two webdav folders, one is read-only, one is writable.\nname your dataset as \"the frozen forest\". name this model as \"cybergod\".\ndesign logo for both of them.\nwhere is the damn mouse cursor? shall we use obs instead of mss?\ncreate exception hooks for all recorders. if any exception is thrown just set redis flag to disable/false/off.\non ubuntu 16.04 we only have python3.5, however we can install up-to-date python via snap. will it work? (nope. network sucks.)\nyou can also consider conda?\nsudo snap install core snapd\nsudo apt install snapd ubuntu-core-snapd-units\nxrandr --output Virtual1 --mode 1280x800\npip3 install pip==18.0\npip3 install --user -r requirements.txt\nsudo apt install python3-tk python3-dev\nsudo apt install ffmpeg\nsudo python3 main_recorder.py\n----\nthe wallpaper can change. better execute some command to check if screen is locked.\n----\nuse temp dir to store recordings, p",
        "type": "code",
        "location": "/ubuntu_qemu_utm_arm_record/README.md:1-41"
    },
    "1607": {
        "file_id": 208,
        "content": "This code contains instructions for setting up a recording environment with specific folder and file configurations, mounting webdav folders, naming datasets and models, designing logos, considering alternative software options, installing required software packages, adjusting display settings, running the main recorder script, checking wallpaper, and monitoring screen lock status.",
        "type": "comment"
    },
    "1608": {
        "file_id": 208,
        "content": "reventing deadlocks. (pending!)",
        "type": "code",
        "location": "/ubuntu_qemu_utm_arm_record/README.md:41-41"
    },
    "1609": {
        "file_id": 208,
        "content": "This code mentions preventing deadlocks but seems incomplete or unfinished.",
        "type": "comment"
    },
    "1610": {
        "file_id": 209,
        "content": "/ubuntu_qemu_utm_arm_record/audio_record.py",
        "type": "filepath"
    },
    "1611": {
        "file_id": 209,
        "content": "This code imports audio processing and error handling libraries, sets recording parameters, checks input devices, initializes a PyAudio stream for recording, reads audio data from the stream and writes to WAV file with timestamps, periodically commits, handles errors, prints warning if Redis is off, stops, closes resources upon completion or failure.",
        "type": "summary"
    },
    "1612": {
        "file_id": 209,
        "content": "import parse\nfrom pyaudio_get_device_info import get_audio_input_device_list\nimport platform\nfrom utils import (\n    filepaths,\n    check_redis_on,\n    check_redis_off,\n    TimestampedContext,\n    set_redis_off_on_exception,\n)\nimport pyaudio\nimport wave\nset_redis_off_on_exception()\nchunk = 1024  # Record in chunks of 1024 samples\nsample_format = pyaudio.paInt16  # 16 bits per sample\nchannels = 2\nfs = 44100  # Record at 44100 samples per second\n# seconds = 3\n# no seconds limit.\n# filename = \"output.wav\"\np = pyaudio.PyAudio()  # Create an interface to PortAudio\n# sudo modprobe snd-aloop\n# use loopback device 0?\nsystem = platform.system()\ninput_device_list = get_audio_input_device_list(p)\ndef get_input_device_index(input_device_list, pattern):\n    for index, device_name in input_device_list:\n        if parse.parse(pattern, device_name):\n            print(\"SELECT AUDIO INPUT DEVICE: %s\" % device_name)\n            return index\n    raise Exception(\"Cannot find audio input device index with pattern:\", pattern)\nif system ==",
        "type": "code",
        "location": "/ubuntu_qemu_utm_arm_record/audio_record.py:1-43"
    },
    "1613": {
        "file_id": 209,
        "content": "Imports libraries for audio processing and error handling, sets recording parameters, checks the audio input device list, and defines a function to get the index of an input device based on a pattern.",
        "type": "comment"
    },
    "1614": {
        "file_id": 209,
        "content": " \"Windows\":\n    raise Exception(\"Windows is currently not supported.\")\nelif system == \"Darwin\":\n    input_device_index = get_input_device_index(input_device_list, \"BlackHole {}\")\nelif system == \"Linux\":\n    input_device_index = get_input_device_index(\n        input_device_list, \"Loopback: PCM (hw:{},1)\"\n    )\n# input_device_index = 2 # shall you automate this?\n#\n# Loopback: PCM (hw:{},1)\nprint(\"Recording\")\nstream = p.open(\n    format=sample_format,\n    channels=channels,  # this is microphone. how to record internal audio?\n    rate=fs,\n    frames_per_buffer=chunk,  # this is the chunk.\n    # macos: 0 for blackhole. but you must set blackhole as output.\n    input_device_index=input_device_index,\n    input=True,\n)\n# frames = []  # Initialize array to store frames\nwf = wave.open(filepaths.audio_record, \"wb\")\nwf.setnchannels(channels)\nwf.setsampwidth(p.get_sample_size(sample_format))\nwf.setframerate(fs)\n# Store data in chunks for 3 seconds\n# for i in range(0, int(fs / chunk * seconds)):\nif check_redis_on():\n    with T",
        "type": "code",
        "location": "/ubuntu_qemu_utm_arm_record/audio_record.py:43-78"
    },
    "1615": {
        "file_id": 209,
        "content": "Code is checking the system type and selecting the appropriate input device for audio recording. It then initializes a PyAudio stream for recording and creates a Wave file object to store the recorded data. The code is written in such a way that it can handle different operating systems, with specific input devices and configurations for each platform (Windows, macOS, Linux).",
        "type": "comment"
    },
    "1616": {
        "file_id": 209,
        "content": "imestampedContext(filepaths.audio_timestamps) as t:\n        while check_redis_off() is False:\n            data = stream.read(chunk)\n            wf.writeframes(data)\n            # wf.writeframes(b\"\".join(frames))\n            # frames.append(data)\n            t.commit()\n        # Stop and close the stream\n        stream.stop_stream()\n        stream.close()\n        # Terminate the PortAudio interface\n        p.terminate()\n        print(\"Finished recording\")\n        # Save the recorded data as a WAV file\n        wf.close()\n        print(\"Saved audio recording to: {}\".format(filepaths.audio_record))\nelse:\n    print(\"AudioRecorder: Can't start. Redis signal is off.\".upper())",
        "type": "code",
        "location": "/ubuntu_qemu_utm_arm_record/audio_record.py:78-98"
    },
    "1617": {
        "file_id": 209,
        "content": "Reading audio data from stream, writing to WAV file, and committing timestamps periodically. If Redis is off, print a warning message. Stop, close, and terminate resources upon completion or failure.",
        "type": "comment"
    },
    "1618": {
        "file_id": 210,
        "content": "/ubuntu_qemu_utm_arm_record/enable_audio_loopback.sh",
        "type": "filepath"
    },
    "1619": {
        "file_id": 210,
        "content": "Enables audio loopback module for Ubuntu QEMU/UTM ARM system.",
        "type": "summary"
    },
    "1620": {
        "file_id": 210,
        "content": "sudo modprobe snd-aloop",
        "type": "code",
        "location": "/ubuntu_qemu_utm_arm_record/enable_audio_loopback.sh:1-1"
    },
    "1621": {
        "file_id": 210,
        "content": "Enables audio loopback module for Ubuntu QEMU/UTM ARM system.",
        "type": "comment"
    },
    "1622": {
        "file_id": 211,
        "content": "/ubuntu_qemu_utm_arm_record/hdf5_test.py",
        "type": "filepath"
    },
    "1623": {
        "file_id": 211,
        "content": "Creating HDF5 file named \"mytestfile.hdf5\", with a dataset \"myset\" of size 100 with boolean dtype.",
        "type": "summary"
    },
    "1624": {
        "file_id": 211,
        "content": "import h5py\n# import numpy as np\nwith h5py.File(\"mytestfile.hdf5\", \"w\") as f:\n    # dset = f.create_dataset(\"mydataset\", (100,), dtype='i')\n    f.create_dataset(\"myset\", (100,), dtype=\"b\")",
        "type": "code",
        "location": "/ubuntu_qemu_utm_arm_record/hdf5_test.py:1-7"
    },
    "1625": {
        "file_id": 211,
        "content": "Creating HDF5 file named \"mytestfile.hdf5\", with a dataset \"myset\" of size 100 with boolean dtype.",
        "type": "comment"
    },
    "1626": {
        "file_id": 212,
        "content": "/ubuntu_qemu_utm_arm_record/kali_prepare_dirs_loop.sh",
        "type": "filepath"
    },
    "1627": {
        "file_id": 212,
        "content": "Moves to directory and loops through loading a WebDAV configuration file.",
        "type": "summary"
    },
    "1628": {
        "file_id": 212,
        "content": "cd '/media/root/Toshiba XG3/works/agi_computer_control'\nwhile true; do\n    cd .\n    tmuxp load \"/media/root/Toshiba XG3/works/agi_computer_control/ubuntu_qemu_utm_arm_record/kali_prepare_two_webdav_dirs.yaml\"\ndone",
        "type": "code",
        "location": "/ubuntu_qemu_utm_arm_record/kali_prepare_dirs_loop.sh:1-5"
    },
    "1629": {
        "file_id": 212,
        "content": "Moves to directory and loops through loading a WebDAV configuration file.",
        "type": "comment"
    },
    "1630": {
        "file_id": 213,
        "content": "/ubuntu_qemu_utm_arm_record/kali_prepare_two_webdav_dirs.sh",
        "type": "filepath"
    },
    "1631": {
        "file_id": 213,
        "content": "This code is killing a tmux session, loading a YAML configuration file into tmuxp to create multiple windows, and running the same command again with different methods in case one fails. It uses Xvfb and gnome-terminal for display purposes.",
        "type": "summary"
    },
    "1632": {
        "file_id": 213,
        "content": "# create some room for tmux.\n# use tmux automation tool, reading yaml config and create multiple windows.\ntmux kill-session -t kali_prepare_two_webdav_dirs\n# tmuxp load kali_prepare_two_webdav_dirs.yaml\n# use absolute path.\n# nohup xvfb-run --server-num=12 --listen-tcp --server-args=\"-screen 0 1280x800x24\" -f /tmp/.Xauthority2 gnome-terminal --display=12 -- tmuxp load \"/media/root/Toshiba XG3/works/agi_computer_control/ubuntu_qemu_utm_arm_record/kali_prepare_two_webdav_dirs.yaml\" & \n# nohup xvfb-run --server-num=12 --listen-tcp --server-args=\"-screen 0 1280x800x24\" -f /tmp/.Xauthority2 gnome-terminal --display=12 -- tmuxp load \"/media/root/Toshiba XG3/works/agi_computer_control/ubuntu_qemu_utm_arm_record/kali_prepare_two_webdav_dirs.yaml\" & \n# gnome-terminal -- tmuxp load \"/media/root/Toshiba XG3/works/agi_computer_control/ubuntu_qemu_utm_arm_record/kali_prepare_two_webdav_dirs.yaml\"",
        "type": "code",
        "location": "/ubuntu_qemu_utm_arm_record/kali_prepare_two_webdav_dirs.sh:1-10"
    },
    "1633": {
        "file_id": 213,
        "content": "This code is killing a tmux session, loading a YAML configuration file into tmuxp to create multiple windows, and running the same command again with different methods in case one fails. It uses Xvfb and gnome-terminal for display purposes.",
        "type": "comment"
    },
    "1634": {
        "file_id": 214,
        "content": "/ubuntu_qemu_utm_arm_record/kali_prepare_two_webdav_dirs.yaml",
        "type": "filepath"
    },
    "1635": {
        "file_id": 214,
        "content": "This code sets up two WebDAV directories, one for reading and one for read-write access. It uses the \"webdav-cli\" tool to connect to a host (10.0.1.6) on ports 8110 and 8111 with root credentials. The first directory is for the \"ubuntu_qemu_utm_arm_record\" folder, while the second one is for the \"recordings\" folder within the same path. Different permissions are granted to each directory.",
        "type": "summary"
    },
    "1636": {
        "file_id": 214,
        "content": "session_name: kali_prepare_two_webdav_dirs\nwindows:\n  - window_name: dev window\n    layout: tiled\n    panes:\n      - shell_command:\n        - \"webdav-cli --host=10.0.1.6 --port=8110 --username=root --password=root --path=/media/root/Toshiba\\\\ XG3/works/agi_computer_control/ubuntu_qemu_utm_arm_record/ --rights=canRead,canGetMimeType,canGetSizecanGetChildren,canGetProperty,canGetProperties,canGetCreationDate,canGetLastModifiedDate,canGetWebName,canGetType\"\n      - shell_command:\n        - \"webdav-cli --host=10.0.1.6 --port=8111 --username=root --password=root --path=/media/root/Toshiba\\\\ XG3/works/agi_computer_control/recordings/ --rights=canCreate,canDelete,canMove,canRename,canAppend,canWrite,canRead,canSource,canGetMimeType,canGetSize,canAddChild,canRemoveChild,canGetChildren,canSetProperty,canGetProperty,canGetProperties,canRemoveProperty,canGetCreationDate,canGetLastModifiedDate,canGetWebName,canGetType\"",
        "type": "code",
        "location": "/ubuntu_qemu_utm_arm_record/kali_prepare_two_webdav_dirs.yaml:1-9"
    },
    "1637": {
        "file_id": 214,
        "content": "This code sets up two WebDAV directories, one for reading and one for read-write access. It uses the \"webdav-cli\" tool to connect to a host (10.0.1.6) on ports 8110 and 8111 with root credentials. The first directory is for the \"ubuntu_qemu_utm_arm_record\" folder, while the second one is for the \"recordings\" folder within the same path. Different permissions are granted to each directory.",
        "type": "comment"
    },
    "1638": {
        "file_id": 215,
        "content": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/README.md",
        "type": "filepath"
    },
    "1639": {
        "file_id": 215,
        "content": "This code sets up automatic login, executes a program on startup, takes screenshots for staleness check, and restores the machine's initial state. It also creates `the_random_forest.service` under `/etc/systemd/system/`.",
        "type": "summary"
    },
    "1640": {
        "file_id": 215,
        "content": "automatic login -> execute program on start -> screenshot to check if stale -> restore init state\nbefore we going too technical, we just restart & restore the machine every 5 minutes.\nput `the_random_forest.service` under `/etc/systemd/system/`",
        "type": "code",
        "location": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/README.md:1-5"
    },
    "1641": {
        "file_id": 215,
        "content": "This code sets up automatic login, executes a program on startup, takes screenshots for staleness check, and restores the machine's initial state. It also creates `the_random_forest.service` under `/etc/systemd/system/`.",
        "type": "comment"
    },
    "1642": {
        "file_id": 216,
        "content": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/check_vm.sh",
        "type": "filepath"
    },
    "1643": {
        "file_id": 216,
        "content": "Checking the state and VRDE of the \"Ubuntu 16.04\" virtual machine using VirtualBox commands",
        "type": "summary"
    },
    "1644": {
        "file_id": 216,
        "content": "vboxmanage showvminfo \"Ubuntu 16.04\" | grep State # get the state\n# vboxmanage showvminfo \"Ubuntu 16.04\" | grep VRDE # get VRDE\n# vboxmanage showvminfo \"Ubuntu 16.04\"",
        "type": "code",
        "location": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/check_vm.sh:1-3"
    },
    "1645": {
        "file_id": 216,
        "content": "Checking the state and VRDE of the \"Ubuntu 16.04\" virtual machine using VirtualBox commands",
        "type": "comment"
    },
    "1646": {
        "file_id": 217,
        "content": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/control_vm.sh",
        "type": "filepath"
    },
    "1647": {
        "file_id": 217,
        "content": "Enables VRDE and stops audio output for \"Ubuntu 16.04\" VM.",
        "type": "summary"
    },
    "1648": {
        "file_id": 217,
        "content": "# vboxmanage controlvm \"Ubuntu 16.04\" keyboardputscancode\n# vboxmanage controlvm \"Ubuntu 16.04\" keyboardputstring\n# cannot perform mouse actions.\n# can only do this when vm running.\nvboxmanage controlvm \"Ubuntu 16.04\" vrde on\nvboxmanage controlvm \"Ubuntu 16.04\" vrdeport 8991\nvboxmanage controlvm \"Ubuntu 16.04\" vrdeproperty vrdeaddress=127.0.0.1\nvboxmanage controlvm \"Ubuntu 16.04\" vrdeproperty vrdeauthtype=null\nvboxmanage controlvm \"Ubuntu 16.04\" audioout off\n# vboxmanage guestcontrol \"Ubuntu 16.04\" run -- ",
        "type": "code",
        "location": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/control_vm.sh:1-14"
    },
    "1649": {
        "file_id": 217,
        "content": "Enables VRDE and stops audio output for \"Ubuntu 16.04\" VM.",
        "type": "comment"
    },
    "1650": {
        "file_id": 218,
        "content": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/disable_logout_poweroff_button.sh",
        "type": "filepath"
    },
    "1651": {
        "file_id": 218,
        "content": "This code sets a setting to suppress the logout, restart, and shutdown buttons.",
        "type": "summary"
    },
    "1652": {
        "file_id": 218,
        "content": "gsettings set com.canonical.indicator.session suppress-logout-restart-shutdown",
        "type": "code",
        "location": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/disable_logout_poweroff_button.sh:1-1"
    },
    "1653": {
        "file_id": 218,
        "content": "This code sets a setting to suppress the logout, restart, and shutdown buttons.",
        "type": "comment"
    },
    "1654": {
        "file_id": 219,
        "content": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/duplicate_frame_detector.py",
        "type": "filepath"
    },
    "1655": {
        "file_id": 219,
        "content": "Takes a screenshot of the virtual machine, checks if the lock indicator image is present in it, and prints \"FIND IMAGE AT\" if found or \"IMAGE NOT FOUND\" if not.",
        "type": "summary"
    },
    "1656": {
        "file_id": 219,
        "content": "import os\nscreenshot_vm = \"screenshot_vm.sh\"\nimage_path = \"output.png\"\nexit_code = os.system(screenshot_vm)\nlock_indicator_path = \"lock_indicator.png\"\n# right now just check the login screen. if it hits the login screen we reboot.\n# or you execute command to find out the state of gnome on display :0\nimport pyscreeze\nresult = pyscreeze.locate(needleImage=lock_indicator_path,haystackImage=image_path)\nif result:\n    print(\"FIND IMAGE AT:\", result)\nelse:\n    print(\"IMAGE NOT FOUND.\")",
        "type": "code",
        "location": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/duplicate_frame_detector.py:1-18"
    },
    "1657": {
        "file_id": 219,
        "content": "Takes a screenshot of the virtual machine, checks if the lock indicator image is present in it, and prints \"FIND IMAGE AT\" if found or \"IMAGE NOT FOUND\" if not.",
        "type": "comment"
    },
    "1658": {
        "file_id": 220,
        "content": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/exec_vm.sh",
        "type": "filepath"
    },
    "1659": {
        "file_id": 220,
        "content": "Unlocking session \"c2\" and running /bin/loginctl for Ubuntu 16.04 guest with username hua and password 110110.",
        "type": "summary"
    },
    "1660": {
        "file_id": 220,
        "content": "# vboxmanage guestcontrol \"Ubuntu 16.04\" --username hua --password 110110 run --exe /usr/bin/env\n# vboxmanage guestcontrol \"Ubuntu 16.04\" --username hua --password 110110 run --exe /bin/loginctl\n# vboxmanage guestcontrol \"Ubuntu 16.04\" --username hua --password 110110 run -- /bin/loginctl unlock-session c2\nvboxmanage guestcontrol \"Ubuntu 16.04\" --username hua --password 110110 run --timeout 100 -- /bin/loginctl\n# Class=user\n# Class=greeter\n# if current session is greeter -> reboot session\n# if is just screen lock -> unlock session",
        "type": "code",
        "location": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/exec_vm.sh:1-10"
    },
    "1661": {
        "file_id": 220,
        "content": "Unlocking session \"c2\" and running /bin/loginctl for Ubuntu 16.04 guest with username hua and password 110110.",
        "type": "comment"
    },
    "1662": {
        "file_id": 221,
        "content": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/exec_vm_if_locked.py",
        "type": "filepath"
    },
    "1663": {
        "file_id": 221,
        "content": "The code imports libraries, defines functions for executing commands in a locked virtual machine, unlocking the session, parsing command output, and handling errors; it also determines if reboot is necessary based on certain conditions.",
        "type": "summary"
    },
    "1664": {
        "file_id": 221,
        "content": "import rich\nimport re\nimport subprocess\nimport traceback\n# cmd = 'vboxmanage guestcontrol \"Ubuntu 16.04\" --username hua --password 110110 run --timeout 100 -- /bin/loginctl'\n# cmd = ['vboxmanage', 'guestcontrol', 'Ubuntu 16.04', '--username', 'hua', '--password', '110110', 'run', '--timeout', '100', '--', '/bin/loginctl','--help']\ndef exec_vm_if_locked(verbose=False,\n                      timeout=1  # seconds.\n                      ):\n    def getcmd(\n        args: list[str] = [],\n        machine=\"Ubuntu 16.04\",\n        username=\"hua\",\n        password=\"110110\",\n        timeout=\"100\",\n        bin=\"/bin/loginctl\",\n    ):\n        cmd = [\n            \"vboxmanage\",\n            \"guestcontrol\",\n            machine,\n            \"--username\",\n            username,\n            \"--password\",\n            password,\n            \"run\",\n            \"--timeout\",\n            timeout,\n            \"--\",\n            bin,\n        ]\n        return cmd + args\n    cmds = [\n        getcmd(e)\n        for e in [\n            [],  # main info.\n      ",
        "type": "code",
        "location": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/exec_vm_if_locked.py:1-42"
    },
    "1665": {
        "file_id": 221,
        "content": "This code imports various libraries and defines a function to execute commands in a virtual machine if it is locked. The getcmd function creates the command string for executing specific operations in the VM, and the main loop calls this function with different arguments to perform multiple actions.",
        "type": "comment"
    },
    "1666": {
        "file_id": 221,
        "content": "      [\n                \"show-seat\",\n                \"seat0\",  # get ActiveSession\n            ],\n        ]\n    ]\n    def cmd_unlock(session): return getcmd(['unlock-session', session])\n    def sess_parse(data):\n        lines = data.split(\"\\n\")\n        mlist = []\n        for l in lines:\n            if \"USER\" in l:\n                continue\n            else:\n                l = l.replace(\"=\", \" \")\n                list_l = re.findall(r\"\\w+\", l)\n                # print(list_l)\n                if list_l == []:\n                    break\n                mlist.append(list_l)\n        return mlist\n    # json is for journal formatting.\n    keys = ['session', 'seat']\n    datamap = {}\n    reboot = False\n    try:\n        for index, cmd in enumerate(cmds):\n            key = keys[index]\n            output = subprocess.check_output(cmd, timeout=timeout)\n            # if with error return code, it will raise exception.\n            # machine not started, service not running.\n            if verbose:\n                print(\"=============O",
        "type": "code",
        "location": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/exec_vm_if_locked.py:42-79"
    },
    "1667": {
        "file_id": 221,
        "content": "The code snippet defines a function `cmd_unlock` that returns a command to unlock the session. It also contains a function `sess_parse` that parses output data from commands, and initializes variables for executing commands and handling errors.",
        "type": "comment"
    },
    "1668": {
        "file_id": 221,
        "content": "UTPUT=============\")\n                print(output.decode())\n                print()\n            dec_output = output.decode()\n            mlist_output = sess_parse(dec_output)\n            if verbose:\n                rich.print(mlist_output)\n            mdict = {e[0]: e[1:] for e in mlist_output}\n            datamap[key] = mdict\n        if verbose:\n            print()\n            rich.print(datamap)\n        active_session = datamap['seat']['ActiveSession'][0]\n        user_active_session = datamap['session'][active_session][1]\n        if user_active_session != 'hua':\n            reboot = True\n        else:\n            cmd = cmd_unlock(active_session)\n            subprocess.call(cmd, timeout=timeout)\n    except:\n        traceback.print_exc()\n    return reboot\nif __name__ == '__main__':\n    reboot = exec_vm_if_locked(verbose=True)\n    print(\"NEED REBOOT?\", reboot)",
        "type": "code",
        "location": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/exec_vm_if_locked.py:79-110"
    },
    "1669": {
        "file_id": 221,
        "content": "This code appears to execute a virtual machine if it is locked, decode and parse the output, store the results in a dictionary, and determine whether a reboot is necessary based on certain conditions. It also includes exception handling for potential errors.",
        "type": "comment"
    },
    "1670": {
        "file_id": 222,
        "content": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/kali_vbox_main_loop.py",
        "type": "filepath"
    },
    "1671": {
        "file_id": 222,
        "content": "The code automates VM management by running bash scripts to stop, prepare directories, restore and start the VM, checks for new recordings within a time threshold, ensures the VM is running or aborts if not, and reboots if necessary.",
        "type": "summary"
    },
    "1672": {
        "file_id": 222,
        "content": "from exec_vm_if_locked import exec_vm_if_locked\nimport time\nimport os\nimport progressbar\nseconds = 60*5\nrestore_vm = \"restore_vm.sh\"\nstop_vm = \"stop_vm.sh\"\nstart_vm = \"start_vm.sh\"\nkali_prepare_two_webdav_dirs = \"../kali_prepare_two_webdav_dirs.sh\"\nABORT_THRESHOLD = 15\nQUIT_THRESHOLD = 60\ndef run_bash_script(script_path):\n    print(\"Excuting bash script: %s\" % script_path)\n    command = f\"bash {script_path}\"\n    return os.system(command)\n# scripts = [stop_vm, kali_prepare_two_webdav_dirs, restore_vm] # restoration will make vm start?\nscripts = [stop_vm, kali_prepare_two_webdav_dirs, restore_vm, start_vm]\nwhile True:\n    os.system(\"cd .\")\n    os.system(\"rm nohup.out\")\n    codes = []\n    for script in scripts:\n        while True:\n            code = run_bash_script(script)\n            time.sleep(1)\n            if script != start_vm:\n                break\n            else:\n                if code != 0:\n                    continue\n                else:\n                    break\n        codes.append(code)\n    print()\n    fo",
        "type": "code",
        "location": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/kali_vbox_main_loop.py:1-41"
    },
    "1673": {
        "file_id": 222,
        "content": "This code is running multiple bash scripts in a loop. It first stops the VM, prepares two WebDAV directories, restores the VM, and starts the VM. If the script encounters an error, it will wait for 15 seconds before aborting or 60 seconds before quitting the process. Each script execution is recorded in the \"codes\" list.",
        "type": "comment"
    },
    "1674": {
        "file_id": 222,
        "content": "r index, script in enumerate(scripts):\n        print(f'{script} EXIT CODE:', codes[index])\n    # if any(codes):\n    #     print()\n    #     print(\"HAS ERROR CODE!\")\n    #     for index, script in enumerate(scripts):\n    #         print(f'{script} EXIT CODE:', codes[index])\n    #     time.sleep(1)\n    #     continue\n    # CAN YOU DO THIS WITHOUT INTERRUPTING ME?\n    print(\"WAITING {} SECONDS...\".format(seconds))\n    abort = 0\n    quit = 0\n    old_rec_paths = os.listdir(\n        \"/media/root/Toshiba XG3/works/agi_computer_control/recordings\")\n    for _ in progressbar.progressbar(range(seconds)):\n        # you just don't wait...\n        paths = os.listdir(\"/tmp/.X11-unix\")\n        rec_paths = os.listdir(\n            \"/media/root/Toshiba XG3/works/agi_computer_control/recordings\")\n        if rec_paths == old_rec_paths:\n            quit += 1\n            if quit > QUIT_THRESHOLD:  # thirty secs.\n                print(\"ABORTING! NOT RECORDING.\")\n                break\n        else:\n            quit=0\n            old_rec",
        "type": "code",
        "location": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/kali_vbox_main_loop.py:41-68"
    },
    "1675": {
        "file_id": 222,
        "content": "This code is checking if there are any error codes in the list of script exit codes. If there are, it prints a message and displays each script's exit code before waiting for a specified number of seconds. It also periodically checks for new recordings and aborts if no new recording appears within a certain time threshold.",
        "type": "comment"
    },
    "1676": {
        "file_id": 222,
        "content": "_paths = rec_paths.copy()\n        target_path = \"X10\"  # where virtualbox runs.\n        vm_running = target_path in paths\n        if not vm_running:\n            abort += 1\n        else:\n            reboot = exec_vm_if_locked()\n            if reboot:\n                abort += 1\n            else:\n                abort = 0\n        if abort > ABORT_THRESHOLD:\n            print(\"ABORTING! VM IS NOT RUNNING.\")\n            break\n        time.sleep(1)\n    print()",
        "type": "code",
        "location": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/kali_vbox_main_loop.py:68-84"
    },
    "1677": {
        "file_id": 222,
        "content": "This code checks if a virtual machine (VM) is running and aborts the script if it's not. If the VM is running, it checks if it needs to be rebooted or not before continuing. If the number of abort attempts exceeds a certain threshold, it prints \"ABORTING! VM IS NOT RUNNING.\" and breaks the loop.",
        "type": "comment"
    },
    "1678": {
        "file_id": 223,
        "content": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/lightdm.conf",
        "type": "filepath"
    },
    "1679": {
        "file_id": 223,
        "content": "This config file sets the default user for automatic login as \"hua\" with no timeout, and uses the \"ubuntu\" session.",
        "type": "summary"
    },
    "1680": {
        "file_id": 223,
        "content": "[SeatDefaults]\nautologin-user=hua\nautologin-user-timeout=0\nuser-session=ubuntu",
        "type": "code",
        "location": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/lightdm.conf:1-4"
    },
    "1681": {
        "file_id": 223,
        "content": "This config file sets the default user for automatic login as \"hua\" with no timeout, and uses the \"ubuntu\" session.",
        "type": "comment"
    },
    "1682": {
        "file_id": 224,
        "content": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/list_vm.sh",
        "type": "filepath"
    },
    "1683": {
        "file_id": 224,
        "content": "Lists all virtual machines on VirtualBox.",
        "type": "summary"
    },
    "1684": {
        "file_id": 224,
        "content": "vboxmanage list vms",
        "type": "code",
        "location": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/list_vm.sh:1-1"
    },
    "1685": {
        "file_id": 224,
        "content": "Lists all virtual machines on VirtualBox.",
        "type": "comment"
    },
    "1686": {
        "file_id": 225,
        "content": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/modify_vm.sh",
        "type": "filepath"
    },
    "1687": {
        "file_id": 225,
        "content": "Enabling VRDE, setting port and address for Ubuntu 16.04 VM.",
        "type": "summary"
    },
    "1688": {
        "file_id": 225,
        "content": "vboxmanage modifyvm \"Ubuntu 16.04\" --vrde on --vrdeport 8981 --vrdeaddress 127.0.0.1 --vrdeauthtype null --vrdemulticon on --audioout off",
        "type": "code",
        "location": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/modify_vm.sh:1-1"
    },
    "1689": {
        "file_id": 225,
        "content": "Enabling VRDE, setting port and address for Ubuntu 16.04 VM.",
        "type": "comment"
    },
    "1690": {
        "file_id": 226,
        "content": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/restore_vm.sh",
        "type": "filepath"
    },
    "1691": {
        "file_id": 226,
        "content": "The code is taking a snapshot of the virtual machine named \"Ubuntu 16.04\" and then restoring different snapshots (Snapshot 3, Snapshot 7, Snapshot 14) to various states. Note that Snapshot 12 has a bug and cannot be restored.",
        "type": "summary"
    },
    "1692": {
        "file_id": 226,
        "content": "# take snapshot\n# vboxmanage snapshot \"Ubuntu 16.04\" take \"Snapshot 3\"\n# restore snapshot\nvboxmanage snapshot \"Ubuntu 16.04\" restore \"Snapshot 14\"\n# 12 has bug.\n# vboxmanage snapshot \"Ubuntu 16.04\" restore \"Snapshot 7\"\n# vboxmanage snapshot \"Ubuntu 16.04\" restore \"Snapshot 6\"\n# vboxmanage snapshot \"Ubuntu 16.04\" restore \"Snapshot 3\"",
        "type": "code",
        "location": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/restore_vm.sh:1-8"
    },
    "1693": {
        "file_id": 226,
        "content": "The code is taking a snapshot of the virtual machine named \"Ubuntu 16.04\" and then restoring different snapshots (Snapshot 3, Snapshot 7, Snapshot 14) to various states. Note that Snapshot 12 has a bug and cannot be restored.",
        "type": "comment"
    },
    "1694": {
        "file_id": 227,
        "content": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/screenshot_vm.sh",
        "type": "filepath"
    },
    "1695": {
        "file_id": 227,
        "content": "Takes a screenshot of the \"Ubuntu 16.04\" virtual machine and saves it as output.png",
        "type": "summary"
    },
    "1696": {
        "file_id": 227,
        "content": "vboxmanage controlvm \"Ubuntu 16.04\" screenshotpng output.png\n# raise error if not running.",
        "type": "code",
        "location": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/screenshot_vm.sh:1-2"
    },
    "1697": {
        "file_id": 227,
        "content": "Takes a screenshot of the \"Ubuntu 16.04\" virtual machine and saves it as output.png",
        "type": "comment"
    },
    "1698": {
        "file_id": 228,
        "content": "/ubuntu_qemu_utm_arm_record/kali_vbox_control/start_vm.sh",
        "type": "filepath"
    },
    "1699": {
        "file_id": 228,
        "content": "Starts a virtual machine named \"Ubuntu 16.04\" using VirtualBox, in headless mode with display forwarding disabled.",
        "type": "summary"
    }
}