{
    "/hardware_capture_hid_power_control/common_keycodes.py:77-103": "Checking Keycode Validity",
    "/hardware_capture_hid_power_control/multiple_inheritance.py": "Multiple Inheritance and Super() Misuse",
    "/hardware_capture_hid_power_control/multiple_inheritance.py:1-42": "Multiple Inheritance and Superclass Calling",
    "/hardware_capture_hid_power_control/multiple_inheritance.py:42-95": "Multiple Inheritance MRO Confusion",
    "/hardware_capture_hid_power_control/multiple_inheritance.py:95-98": "Multiple Inheritance Instantiation and Method Call",
    "/hardware_capture_hid_power_control/parse_hid_keycodes.py": "Parse and Filter HID Keycodes",
    "/hardware_capture_hid_power_control/parse_hid_keycodes.py:1-42": "Parse HID Keycodes to DataFrame",
    "/hardware_capture_hid_power_control/parse_hid_keycodes.py:42-74": "Parse HID Keycodes and Filter Data",
    "/hardware_capture_hid_power_control/set_capture_card_properties.sh": "Capturing Video Properties with v4l2 Utilities",
    "/hardware_capture_hid_power_control/test_control.py": "HID Power Control Testing",
    "/hardware_capture_hid_power_control/test_control.py:1-49": "Safe Scroll Code Converter",
    "/hardware_capture_hid_power_control/test_control.py:103-103": "Serial Communication Configuration and Control",
    "/hardware_capture_hid_power_control/test_control.py:103-135": "Serial Data Exchange and Flag Conversion",
    "/hardware_capture_hid_power_control/test_control.py:135-170": "Device Byte and Opcodes Control",
    "/hardware_capture_hid_power_control/test_control.py:170-196": "HID Power Control Commands",
    "/hardware_capture_hid_power_control/test_control.py:196-223": "HID Power Control Keyboard Test",
    "/hardware_capture_hid_power_control/test_control.py:223-251": "Keyboard and Mouse Input Processing Code",
    "/hardware_capture_hid_power_control/test_control.py:251-287": "KCOM Protocol Mouse and Button Control",
    "/hardware_capture_hid_power_control/test_control.py:287-321": "Multimedia Key Clearer",
    "/hardware_capture_hid_power_control/test_control.py:321-348": "Multimedia Key Data Transmission Code",
    "/hardware_capture_hid_power_control/test_control.py:348-375": "Superclass Initialization and Packetized Communication",
    "/hardware_capture_hid_power_control/test_control.py:375-404": "Checksum and Packet Construction",
    "/hardware_capture_hid_power_control/test_control.py:404-437": "Serial Checksum Calculation for Device Commands",
    "/hardware_capture_hid_power_control/test_control.py:437-466": "Keyboard Class for Serial Device Control",
    "/hardware_capture_hid_power_control/test_control.py:466-496": "HID Power Control Function Definition",
    "/hardware_capture_hid_power_control/test_control.py:49-83": "Serial Port Device Initialization and ID Verification",
    "/hardware_capture_hid_power_control/test_control.py:496-524": "HID Power Control Testing",
    "/hardware_capture_hid_power_control/test_control.py:524-551": "Sends Data to Hardware Capture Device",
    "/hardware_capture_hid_power_control/test_control.py:551-579": "HID Mouse Control Class",
    "/hardware_capture_hid_power_control/test_control.py:579-608": "Absolute Screen Data Sender",
    "/hardware_capture_hid_power_control/test_control.py:608-640": "HID Power Control Data Handling",
    "/hardware_capture_hid_power_control/test_control.py:640-664": "Hardware Control Data Packets",
    "/hardware_capture_hid_power_control/test_control.py:664-696": "HID Power Control Packets",
    "/hardware_capture_hid_power_control/test_control.py:696-724": "Preparing Byte Array for Hardware Communication",
    "/hardware_capture_hid_power_control/test_control.py:724-751": "Move Mouse to Coordinates",
    "/hardware_capture_hid_power_control/test_control.py:751-777": "Customizable Mouse Click Simulator",
    "/hardware_capture_hid_power_control/test_control.py:83-103": "Power Device Serial Control",
    "/hardware_capture_hid_power_control/test_hidraw.py": "USB Device Testing with HID API",
    "/hardware_capture_hid_power_control/test_hidraw.py:1-41": "Test HIDRAW Devices by Manufacturer String",
    "/hardware_capture_hid_power_control/test_hidraw.py:41-80": "HID API Test Script for USB Devices",
    "/hardware_capture_hid_power_control/test_video_capture.py": "Failed Video Capture Configuration",
    "/hardware_capture_hid_power_control/test_video_capture.py:1-38": "Troubleshooting Video Capture Configurations",
    "/hardware_capture_hid_power_control/test_video_capture.py:38-58": "Test Video Capture Python Script",
    "/hid_utils.py": "Mouse Scroll and Key Translation Utility",
    "/hid_utils.py:1-30": "Abstract Class HIDInterface Defined",
    "/hid_utils.py:121-146": "Stripping Key Literals in hid_utils.py",
    "/hid_utils.py:146-174": "Byte and Integer Aliases for HID Utilities",
    "/hid_utils.py:174-229": "Multimedia Key Enumeration",
    "/hid_utils.py:229-273": "Input Processing System: Handling Keystrokes with Classes",
    "/hid_utils.py:273-305": "XK keysym translation table",
    "/hid_utils.py:30-71": "HID Interface: Abstract Methods for Mouse and Keyboard",
    "/hid_utils.py:305-324": "Translate Key Literals to XK_KEYSYMs",
    "/hid_utils.py:71-121": "Mouse Scroll Event Handling in HID Module",
    "/hotkey_listener.py": "Hotkey Listener Python Script",
    "/hotkey_listener.py:1-61": "Hotkey Listener: Keyboard Mapping and Handling",
    "/hotkey_listener.py:61-72": "Hotkey Mapper",
    "/hotkey_tester.py": "Control Key Hotkey Disabling",
    "/install_nvidia_container_toolkit.sh": "Install NVIDIA Container Toolkit on Kali 2022.2",
    "/jinja_utils.py": "Jinja-Powered Python Code Manipulation",
    "/jinja_utils.py:1-43": "Python Code Manipulation Utilities",
    "/jinja_utils.py:120-146": "Code Writer and Formatter",
    "/jinja_utils.py:146-173": "Pyright Error Handler",
    "/jinja_utils.py:173-209": "Jinja2 Template File Check",
    "/jinja_utils.py:209-245": "Jinja2 Environment Setup and Template Loading",
    "/jinja_utils.py:245-258": "Python Jinja Template Executor",
    "/jinja_utils.py:43-84": "Revised Jinja Utility Functions",
    "/jinja_utils.py:84-120": "Load, Render, Format and Log\n(or)\nLoad-Render-Format-Log\n(or)\nLoad-Render-Format-Backup-Log",
    "/keyboard_and_mouse.py": "Keyboard & Mouse Event Recorder",
    "/keyboard_and_mouse.py:1-44": "Keyboard & Mouse Event Recorder with Pynput",
    "/keyboard_and_mouse.py:44-68": "Looping JSON Lines Writer for Keyboard & Mouse States",
    "/launch_docker_devicemapper_limit_storage.sh": "Exploring Docker Storage Options with --storage-opt",
    "/launch_streaming_utils.sh": "Launch Streaming Utilities with tmux Script",
    "/lego_mindstorm_physical_mouse_keyboard_control/README.md": "Lego Mindstorm Keyboard-Mouse Control",
    "/lego_mindstorm_physical_mouse_keyboard_control/test.py": "EV3 Motor Sound and Movement Control",
    "/lego_mindstorm_physical_mouse_keyboard_control/usb_ev3.py": "USB EV3 Library Integration",
    "/lunar_lander_test/test.py": "Lunar Lander Random Action Test",
    "/metalearning_random_shuffle/README.md": "Entropy-Reduced Metalearning Shuffle",
    "/metalearning_random_shuffle/main.py": "Random Shuffle Dataset",
    "/mouse-and-keyboard-encoding-fft.py": "Multimodal Embeddings via FFT",
    "/mouse-and-keyboard-encoding-fft.py:1-55": "Mouse and Keyboard FFT Encoding",
    "/mouse-and-keyboard-encoding-fft.py:129-135": "Efficient Embeddings with FFT",
    "/mouse-and-keyboard-encoding-fft.py:55-98": "Mouse & Keyboard Encoding with FFT",
    "/mouse-and-keyboard-encoding-fft.py:98-129": "Fourier Transforms in Modeling with LSTM/GRU",
    "/mydatamodel.py": "Python Class from MyDataModel.yaml",
    "/mydatamodel.yaml": "Dual YAML Variables in /mydatamodel.yaml",
    "/mypy_check.py": "Mock Testing and Caching in MyPy Checker",
    "/mypy_check.py:1-39": "Accelerating Mock Testing with mypy.api",
    "/mypy_check.py:39-48": "MyClass: Age Validation, Prime Factors & Integer List",
    "/off_streaming_utils.sh": "Kill Streaming Utils Sessions",
    "/packup.cmd": "Backup and Archive Directory",
    "/packup.sh": "Archive, Move, and Manage Files with 7-Zip",
    "/player.py": "DPI-Aware Keyboard/Mouse Control with Pynput",
    "/player.py:1-60": "Keycode Translation and Limitations",
    "/player.py:110-153": "Keyboard and Mouse Controller with DPI Awareness",
    "/player.py:153-179": "Mouse & Keyboard State List Processor",
    "/player.py:179-204": "Input Control System: Keyboard & Mouse Actions",
    "/player.py:204-220": "Input Handler Optimization",
    "/player.py:60-110": "Keycode-Character Mapping Dictionary",
    "/propaganda/agi_computer_recordings/launch_server.cmd": "WebDAV Command Execution for Recordings",
    "/propaganda/cybergod_propaganda/README.md": "Creating Cybergod Propaganda: Step-by-Step Approach",
    "/propaganda/video_script/README.md": "API for FSE Video Search and Conversion",
    "/propaganda/video_script/clyde_script.txt": "Cybergod: Code for the Future",
    "/propaganda/video_script/clyde_script.txt:1-19": "Intuitive AI Keyboard and Mouse Controller",
    "/propaganda/video_script/clyde_script.txt:19-27": "Promoting Cybergod: Developer Call to Action",
    "/propaganda/video_script/clyde_script_cn.txt": "Automate. Save Time. Cybergod.",
    "/propaganda/video_script/compile_script.py": "Background Music Location Uncertainty",
    "/propaganda/video_script/download_video.py": "Video Downloader and Mapper",
    "/propaganda/video_script/preprocess.py": "Video Script Preprocessor",
    "/propaganda/video_script/read_text.py": "Text-to-Audio Converter",
    "/propaganda/video_script/read_text.py:1-25": "Speech Generator from YAML",
    "/propaganda/video_script/read_text.py:25-41": "Text-to-Speech Conversion Tool",
    "/propaganda/video_script/script.txt": "Automate Your Life with Cybergod",
    "/propaganda/video_script/script.yaml": "Cybergod Promo Script & Video",
    "/propaganda/video_script/script.yaml:1-21": "Cybergod: YAML Video Script",
    "/propaganda/video_script/script.yaml:21-44": "Promo Video Script",
    "/propaganda/video_script/script.yaml:44-45": "One-Click Three-Chain Video",
    "/pyanalyze_check.py": "Pyanalyze: Testing, Serializing, and Extracting Lambda Functions",
    "/pyanalyze_check.py:1-40": "Literal-Only Arguments in PyAnalyze Check",
    "/pyanalyze_check.py:40-57": "Lambda Serialization and Testing in Pyanalyze Check",
    "/pyright_utils.py": "Pyright Utils: Parsing, Errors, and Logging",
    "/pyright_utils.py:1-37": "Pyright Version Check and Error Tracking",
    "/pyright_utils.py:37-67": "Pyright CLI Wrapper",
    "/pyright_utils.py:67-77": "Check Undefined Variables in Pyright Output",
    "/pytest_disable_assertion_inspection_use_better_exceptions.py": "Monkeypatching Numpy Array for Custom Testing",
    "/pytest_disable_assertion_inspection_use_better_exceptions.py:1-33": "Pytest: Enhanced Exceptions and Assertions",
    "/pytest_disable_assertion_inspection_use_better_exceptions.py:33-72": "Mocking Numpy Array Creation for Testing",
    "/pytest_disable_assertion_inspection_use_better_exceptions.py:72-81": "Creating an Array",
    "/pytropos_check.py": "Matrix Multiplication Testing with NumPy",
    "/qstar_my_guess/README.md": "Harnessing AI for Code Collaboration",
    "/qstar_my_guess/astar_test.py": "A* Maze Solver Test",
    "/qstar_my_guess/astar_test.py:1-38": "Generate and Draw ASCII Mazes with Solutions",
    "/qstar_my_guess/astar_test.py:105-116": "Testing A* Maze Solver",
    "/qstar_my_guess/astar_test.py:38-72": "Maze Solver AStar Extension",
    "/qstar_my_guess/astar_test.py:72-105": "A* Maze Solver in Python",
    "/qstar_my_guess/main.py": "MCTS-PPO Transformers for RL and Video Generation",
    "/qstar_my_guess/main.py:1-22": "Monte Carlo Tree Search after PPO Training: Consciousness and Backpropagation",
    "/qstar_my_guess/main.py:22-30": "Semantically Invariant Transformations in Models",
    "/qstar_my_guess/main.py:30-40": "Video Generation with MCTS and Agent Training",
    "/qstar_my_guess/mcts_pseudo.py": "Monte Carlo Tree Search Algorithm Functions",
    "/qstar_my_guess/mcts_pseudo.py:1-40": "Monte Carlo Tree Search Algorithm: Traversal, Simulation, and Backpropagation",
    "/qstar_my_guess/mcts_pseudo.py:40-77": "Pseudo-Code: MCTS Algorithm Functions",
    "/qstar_my_guess/mcts_pseudo.py:77-109": "Monte Carlo Tree Search Functions",
    "/qstar_my_guess/mcts_test.py": "OpenLoopMCTS CartPole Game Training and Testing",
    "/qstar_my_guess/mcts_test.py:1-32": "Setting Up CartPole Environment",
    "/qstar_my_guess/mcts_test.py:32-65": "MCTS-based Game Environment Initialization",
    "/qstar_my_guess/mcts_test.py:65-93": "CartPole OpenLoop MCTS Training and Self-Play",
    "/qstar_my_guess/signature_test.py": "Dynamic Function Signatures with Type Hints",
    "/qstar_my_guess/thought_tokens.py": "Thought Token Iteration Algorithm",
    "/qstar_my_guess/thought_tokens.py:1-28": "Token Insertion Methods: Class Definitions",
    "/qstar_my_guess/thought_tokens.py:131-159": "Inserting Thought Tokens and Padding Sequences",
    "/qstar_my_guess/thought_tokens.py:159-197": "Padding Thought Tokens",
    "/qstar_my_guess/thought_tokens.py:197-225": "Thought Token Inserter",
    "/qstar_my_guess/thought_tokens.py:225-252": "Training Pairs Generator for Thought Tokens",
    "/qstar_my_guess/thought_tokens.py:252-277": "Thought Token Insertion and Mask Generation",
    "/qstar_my_guess/thought_tokens.py:277-301": "Swap-Ratio Token Masking",
    "/qstar_my_guess/thought_tokens.py:28-63": "Thought Token Processing and Insertion",
    "/qstar_my_guess/thought_tokens.py:301-334": "Token Pair Generation with Thought Tokens",
    "/qstar_my_guess/thought_tokens.py:334-367": "Token Cropping and Autoregressive Training Pairs",
    "/qstar_my_guess/thought_tokens.py:367-396": "Functions for Thought Token Generation",
    "/qstar_my_guess/thought_tokens.py:396-422": "Probabilistic Gaussian Noise Generation",
    "/qstar_my_guess/thought_tokens.py:422-443": "Probabilistic Noise Token Generation",
    "/qstar_my_guess/thought_tokens.py:443-480": "Generating Thought Tokens with Python",
    "/qstar_my_guess/thought_tokens.py:480-489": "Thought Token Insertion Pairs",
    "/qstar_my_guess/thought_tokens.py:63-92": "Correct Input Sizes and Zero Tensors for Thought Tokens",
    "/qstar_my_guess/thought_tokens.py:92-131": "Masking and Sampling Thought Tokens",
    "/qstar_my_guess/time_traversal.py": "Time-Optimized AI Model Development",
    "/qstar_my_guess/time_traversal.py:1-19": "AI Model Development: MCTS, Gradient Descent, and Feeling Models",
    "/qstar_my_guess/time_traversal.py:120-143": "Conditional Code for Rollback and Actions",
    "/qstar_my_guess/time_traversal.py:143-161": "Cosine-Based Gradient Descent for Model Learning",
    "/qstar_my_guess/time_traversal.py:161-167": "Trusted Q-Function Threshold",
    "/qstar_my_guess/time_traversal.py:19-51": "Time-Based Heuristic Distance for Autoregressive Models",
    "/qstar_my_guess/time_traversal.py:51-75": "ML, World Model Updates, Neural Networks",
    "/qstar_my_guess/time_traversal.py:75-96": "Time Traversal: Abstract and Deabstract, Speed Control",
    "/qstar_my_guess/time_traversal.py:96-120": "Time-Traversal Language Generation",
    "/random_actor.py": "Random Actor: Simulating Mouse & Keyboard Inputs",
    "/random_actor.py:1-44": "Random User Input Generator",
    "/random_actor.py:150-236": "Keycode Lists for Later Use",
    "/random_actor.py:236-304": "Random Keyboard Actor",
    "/random_actor.py:304-349": "Random Mouse Interactions",
    "/random_actor.py:349-398": "Random Actor Keyboard and Mouse Loop",
    "/random_actor.py:398-400": "Ignoring Exceptions in \"ouseUp\" Function",
    "/random_actor.py:44-150": "Keyboard Keys and Modifiers List",
    "/record_playback_test.py": "Pywinauto UI Automation Testing",
    "/recorder.py": "CPU-bound Screen Recorder: Optimizing Keystrokes, Images, No Nvidia GPU",
    "/recording_train_parse.py": "Synchronizing Training Data",
    "/recording_train_parse.py:1-42": "Video Parsing and Data Structures",
    "/recording_train_parse.py:111-136": "Parsing Active Content Indexes",
    "/recording_train_parse.py:136-147": "Frame Parsing and Training Exception Handling",
    "/recording_train_parse.py:42-78": "Synchronizing Frame Indexes",
    "/recording_train_parse.py:78-111": "Synchronized Hidden-Video Sequencing",
    "/render_python_code.py": "Render Python Code with Jinja Templates",
    "/requirements.txt": "Multiple Libraries Imported",
    "/rt_x_experiments/README.md": "Dynamic Tokenizer AI Experiments",
    "/rt_x_experiments/README.md:1-19": "Dynamic Tokenizer and Attention Layers",
    "/rt_x_experiments/README.md:19-19": "Deviant AI Systems: Genuity Tests and Data Extraction",
    "/rt_x_experiments/audio_to_mel/test_librosa.py": "Audio to Mel Spectrogram with Librosa",
    "/rt_x_experiments/audio_to_mel/test_librosa.py:1-37": "Audio to Mel Spectrogram Conversion",
    "/rt_x_experiments/audio_to_mel/test_librosa.py:37-37": "Assigning 'd' Shape to Variable",
    "/rt_x_experiments/fourier_transform_combine_data/test_common.py": "Combining Arrays with Random Values",
    "/rt_x_experiments/fourier_transform_combine_data/test_fft_1d.py": "Fourier Transform Combination and Inverse",
    "/rt_x_experiments/fourier_transform_combine_data/test_multidimension_fourier_transform_2d.py": "Multidimensional FFT Combination",
    "/rt_x_experiments/gradient_undescent/dynamic_learning_rate.py": "Dynamic Learning Rate Optimizer Functions",
    "/rt_x_experiments/gradient_undescent/test_unlearning.py": "Self-Learning Model with Loss Inversion",
    "/rt_x_experiments/gradient_undescent/test_unlearning.py:1-49": "Model Initialization and Memory Checking",
    "/rt_x_experiments/gradient_undescent/test_unlearning.py:124-138": "Gradient Descent Unlearning: Testing Loss Evolution",
    "/rt_x_experiments/gradient_undescent/test_unlearning.py:49-89": "Self-Generated Data Training with Adam Optimizer",
    "/rt_x_experiments/gradient_undescent/test_unlearning.py:89-124": "Unlearning with Loss Inversion and Randomized Params",
    "/rt_x_experiments/partial_training_network/test_freeze_one_and_train_another.py": "Dynamic Neural Network Partial Training",
    "/rt_x_experiments/partial_training_network/test_freeze_one_and_train_another.py:1-50": "Freeze and Train Neural Network Layers",
    "/rt_x_experiments/partial_training_network/test_freeze_one_and_train_another.py:134-165": "Controlling GPU Memory with Layer Freeze/Unfreeze",
    "/rt_x_experiments/partial_training_network/test_freeze_one_and_train_another.py:50-93": "Freeze and Train: Partial Network Experiments",
    "/rt_x_experiments/partial_training_network/test_freeze_one_and_train_another.py:93-134": "Freeze and Train Network Parameters",
    "/rt_x_experiments/real_attention/2d_convolve.py": "2D Convolution in Real Attention",
    "/rt_x_experiments/real_attention/low_rank_positional_encoding.py": "Low-Rank Positional Encoding with FFT",
    "/rt_x_experiments/real_attention/recursive_positional_encoding.py": "Recursive Positional Encoding for Attention",
    "/rt_x_experiments/real_attention/sin_2d_positional_encoding.py": "2D Positional Encoding for Bilinear Interpolation",
    "/rt_x_experiments/real_attention/sin_2d_positional_encoding.py:1-39": "Sin-Based 2D Positional Encoding",
    "/rt_x_experiments/real_attention/sin_2d_positional_encoding.py:39-62": "Rescale, Interpolate, Normalize and Display (RIND) Image Processing",
    "/rt_x_experiments/real_attention/test_model_level_real_attention.py": "Image Crop Functions with Grayscale Analysis",
    "/rt_x_experiments/real_attention/test_model_level_real_attention.py:1-28": "Recursive Real Attention Image Cropping",
    "/rt_x_experiments/real_attention/test_model_level_real_attention.py:28-59": "Real-Time Attention Image Cropping",
    "/rt_x_experiments/real_attention/test_model_level_real_attention.py:59-89": "Crop Center Calculation via Convolution",
    "/rt_x_experiments/real_attention/test_model_level_real_attention.py:89-89": "Fractal Positional Embeddings",
    "/rt_x_experiments/requirements.txt": "Codebase Dependencies",
    "/rt_x_experiments/rt_x_test_code/requirements.txt": "PyTorch Libraries: Classifier-Free and EfficientNet",
    "/rt_x_experiments/rt_x_test_code/rtx1_example.py": "RTX1 Model Evaluation and Training Logits",
    "/rt_x_experiments/rt_x_test_code/rtx2_example.py": "Efficient Robot Action Model Training on RTX2",
    "/rt_x_experiments/rt_x_test_code/rtx2_example.py:1-35": "Torch Distributed Module Wrapping",
    "/rt_x_experiments/rt_x_test_code/rtx2_example.py:101-137": "Device Detection and Model Forward Pass",
    "/rt_x_experiments/rt_x_test_code/rtx2_example.py:137-167": "RTX2 Forward Method: Encoding, Decoding, and Error Handling",
    "/rt_x_experiments/rt_x_test_code/rtx2_example.py:167-194": "Audio-ViT Transformer Training Dataset",
    "/rt_x_experiments/rt_x_test_code/rtx2_example.py:194-221": "RTX2 Model GPU Initialization",
    "/rt_x_experiments/rt_x_test_code/rtx2_example.py:221-233": "Memory Usage Calculator",
    "/rt_x_experiments/rt_x_test_code/rtx2_example.py:35-59": "Recursive Module Wrapping Decision",
    "/rt_x_experiments/rt_x_test_code/rtx2_example.py:59-79": "Activation Checkpointing Wrapper Function",
    "/rt_x_experiments/rt_x_test_code/rtx2_example.py:79-101": "Module Wrapping for Efficiency",
    "/rt_x_experiments/special_tokenizer_with_actions/hourglass_lm.py": "Hierarchical Transformer with Resampling and Custom Decoder",
    "/rt_x_experiments/special_tokenizer_with_actions/hourglass_lm.py:1-24": "Hourglass: Relative Attention Transformer Model",
    "/rt_x_experiments/special_tokenizer_with_actions/hourglass_lm.py:109-136": "Hourglass LM: Hierarchical Model Definition",
    "/rt_x_experiments/special_tokenizer_with_actions/hourglass_lm.py:136-158": "Hierarchical Transformer Language Model",
    "/rt_x_experiments/special_tokenizer_with_actions/hourglass_lm.py:158-176": "Decoder with Shortening Options",
    "/rt_x_experiments/special_tokenizer_with_actions/hourglass_lm.py:176-192": "Hourglass LM Model Construction Function",
    "/rt_x_experiments/special_tokenizer_with_actions/hourglass_lm.py:192-215": "Creating a Hierarchical Transformer Language Model",
    "/rt_x_experiments/special_tokenizer_with_actions/hourglass_lm.py:215-241": "Hourglass Valley Decoder Block",
    "/rt_x_experiments/special_tokenizer_with_actions/hourglass_lm.py:24-47": "Transformer Decoder Block with Relative Attention",
    "/rt_x_experiments/special_tokenizer_with_actions/hourglass_lm.py:241-269": "Hourglass LM: Custom Downsampling and Upsampling Layers",
    "/rt_x_experiments/special_tokenizer_with_actions/hourglass_lm.py:269-299": "Hourglass Decoder Network Creation",
    "/rt_x_experiments/special_tokenizer_with_actions/hourglass_lm.py:299-312": "Hourglass Language Model Creation",
    "/rt_x_experiments/special_tokenizer_with_actions/hourglass_lm.py:47-70": "Dropout-based Attention Calculation",
    "/rt_x_experiments/special_tokenizer_with_actions/hourglass_lm.py:70-109": "Hierarchical Language Model with Attention and Dropout",
    "/rt_x_experiments/special_tokenizer_with_actions/test_action_and_text_tokenizer.py": "Custom Action-Aware Tokenizer",
    "/rt_x_experiments/special_tokenizer_with_actions/test_action_and_text_tokenizer.py:1-27": "Special Action-Aware Text Tokenizer",
    "/rt_x_experiments/special_tokenizer_with_actions/test_action_and_text_tokenizer.py:27-56": "Custom Special Tokenizer with Actions",
    "/rt_x_experiments/special_tokenizer_with_actions/test_action_and_text_tokenizer.py:56-83": "Special Tokenizer Test and Encoding",
    "/rt_x_experiments/special_tokenizer_with_actions/test_action_and_text_tokenizer.py:83-99": "Multi-Token AI: Performance and Quality Tradeoffs",
    "/rt_x_experiments/special_tokenizer_with_actions/test_hierachical_tokenization.py": "Hierarchical Tokenization Transformer",
    "/rt_x_experiments/special_tokenizer_with_actions/test_hierachical_tokenization.py:1-43": "Binary Shift for Hierarchical Tokenization",
    "/rt_x_experiments/special_tokenizer_with_actions/test_hierachical_tokenization.py:101-127": "Hierarchical Tokenization Model",
    "/rt_x_experiments/special_tokenizer_with_actions/test_hierachical_tokenization.py:127-153": "Multi-Layer Tokenizer Implementation",
    "/rt_x_experiments/special_tokenizer_with_actions/test_hierachical_tokenization.py:153-178": "Sparse Transformer Forward Function",
    "/rt_x_experiments/special_tokenizer_with_actions/test_hierachical_tokenization.py:178-206": "Hierarchical Tokenization Model",
    "/rt_x_experiments/special_tokenizer_with_actions/test_hierachical_tokenization.py:206-230": "Hierarchical Tokenization with Transformer",
    "/rt_x_experiments/special_tokenizer_with_actions/test_hierachical_tokenization.py:230-249": "Hierarchical Tokenization with Residual Connections",
    "/rt_x_experiments/special_tokenizer_with_actions/test_hierachical_tokenization.py:249-269": "Hierarchical Tokenization with Sparse Transformer",
    "/rt_x_experiments/special_tokenizer_with_actions/test_hierachical_tokenization.py:269-286": "Hierarchical Tokenization Transformer Model Test",
    "/rt_x_experiments/special_tokenizer_with_actions/test_hierachical_tokenization.py:43-75": "Multi-Headed Self-Attention Stack Module",
    "/rt_x_experiments/special_tokenizer_with_actions/test_hierachical_tokenization.py:75-101": "Hierarchical Transformer for Text Classification",
    "/rt_x_experiments/special_tokenizer_with_actions/test_simutaneous_tokenization_embedding.py": "Simultaneous Action Tokenization and Embedding",
    "/rt_x_experiments/special_tokenizer_with_actions/test_simutaneous_tokenization_embedding.py:1-22": "Simultaneous Tokenization and Embedding",
    "/rt_x_experiments/special_tokenizer_with_actions/test_simutaneous_tokenization_embedding.py:22-22": "Simultaneous Tokenization and Embedding",
    "/rt_x_experiments/special_tokenizer_with_actions/test_tokenmonster.py": "Using TokenMonster for Custom Vocabulary",
    "/rt_x_experiments/zoom_pan_action.py": "Zoom and Pan Image Cropping",
    "/run_gpu_docker.sh": "Detect GPU in Docker",
    "/screenshot_test.py": "Efficient Screenshot Testing",
    "/software_capture_hid_control/Makefile": "Building HID Control Script via Makefile",
    "/software_capture_hid_control/abstract_class_test.py": "Abstract Class Test: Implementing Abstract Methods a and b",
    "/software_capture_hid_control/test_control.py": "Software Capture: HID Control with Live Streaming",
    "/software_capture_hid_control/test_control.py:1-21": "Enhancing Software Control Capabilities",
    "/software_capture_hid_control/test_control.py:118-143": "HID Mouse and Keyboard Control Functions",
    "/software_capture_hid_control/test_control.py:143-167": "Simulating Mouse Events and Scrolling",
    "/software_capture_hid_control/test_control.py:167-195": "Fullscreen SmartDisplay Xephyr Streaming",
    "/software_capture_hid_control/test_control.py:195-216": "Unit Testing Display Setup with Various Backends and pynput Issues",
    "/software_capture_hid_control/test_control.py:21-70": "Fullscreen App Control via Xdotool",
    "/software_capture_hid_control/test_control.py:216-243": "Start Gnome Terminal with Command Execution",
    "/software_capture_hid_control/test_control.py:243-265": "Terminal Screenshot Capture and Control",
    "/software_capture_hid_control/test_control.py:265-273": "Capturing and Exiting Terminal Screenshot",
    "/software_capture_hid_control/test_control.py:70-89": "Efficient Xdo Object Deletion",
    "/software_capture_hid_control/test_control.py:89-118": "XDo HID Interface for Mouse and Keyboard",
    "/software_capture_hid_control/test_xdo.py": "Send Keystrokes in Current Window",
    "/streaming_utils.yaml": "Streaming Utilities Configurations",
    "/sync_utils.sh": "File Sync and Update",
    "/terminal_test_tk.py": "Tkinter Terminal Window with tkterminal",
    "/test/run_test.sh": "Run Test Project",
    "/test/test_abstract_impl.py": "Abstract Base Classes and Implementations",
    "/test/test_project.py": "Model Training and Data Processing in Test Project",
    "/test/test_project.py:1-37": "Comprehensive Model Training and Testing Setup",
    "/test/test_project.py:117-164": "Test Fixtures for VisionTransformer Model",
    "/test/test_project.py:164-195": "Training Custom Model with Test Function",
    "/test/test_project.py:195-224": "HID Model Evaluation Testing",
    "/test/test_project.py:224-243": "Creating Image Data and ConsciousBlocks"
}