{
    "1900": {
        "file_id": 263,
        "content": " to start once when server is running):\n```bash\n# need \"davfs2\" package\nmkdir /mnt/root_webdav\necho -e \"\\n\\n\" | mount -t davfs http://127.0.0.1:8080/ /mnt/root_webdav/\n```\n## auto mount external/removable drives (to fixed path)\ncheck if automount is enabled\n```bash\ngsettings list-recursively org.gnome.desktop.media-handling \n```\ndisable gnome automount:\n```bash\ngsettings set org.gnome.desktop.media-handling automount true\ngsettings set org.gnome.desktop.media-handling automount-open true\n```\nwrite this to `/etc/fstab`:\n```\nUUID=XXXXXXXXXXXXXXX    /myhdd <fstype>  auto,nofail,noatime,rw,user    0   0\n```\nrun this command every minute with crontab:\n```bash\nmount -a\n```\n## reset usb\nunder `/sys/bus/pci/drivers/(xhci_hci|ehci)`, echo usb device ids (once at a time) to `unbind` and `bind` respectively to reset usb devices.\nthe same for `/sys/bus/usb/drivers/*`.\nfind device id by \"lsusb\". use command \"usbreset\" from package \"usbutils\".",
        "type": "code",
        "location": "/usb_power_management/linux/README.md:93-134"
    },
    "1901": {
        "file_id": 263,
        "content": "This code is configuring the system to automatically mount external/removable drives to a fixed path. It also includes instructions for resetting USB devices using specific device IDs obtained from \"lsusb\" command and packages like \"davfs2\" and \"usbutils\".",
        "type": "comment"
    },
    "1902": {
        "file_id": 264,
        "content": "/usb_power_management/linux/devcontrol.sh",
        "type": "filepath"
    },
    "1903": {
        "file_id": 264,
        "content": "This script turns on power management for all USB devices, sets the power level to \"on\", disables hardware LPM for USB 3.0, and disables USB 3.1 hardware LPM.",
        "type": "summary"
    },
    "1904": {
        "file_id": 264,
        "content": "# ref: https://www.kernel.org/doc/html/v4.16/driver-api/usb/power-management.html\ncd /sys/bus/usb/devices\nls -1 */power/control | xargs -Iabc bash -c \"echo on > abc\"\nls -1 */power/level | xargs -Iabc bash -c \"echo on > abc\"\necho -1 > /sys/module/usbcore/parameters/autosuspend/.\nls -1 */power/usb2_hardware_lpm | xargs -Iabc bash -c \"echo n > abc\"\n# ls -1 */power/usb3_hardware_lpm_u1 | xargs -Iabc bash -c \"echo disable > abc\"\n# ls -1 */power/usb3_hardware_lpm_u2 | xargs -Iabc bash -c \"echo disable > abc\"",
        "type": "code",
        "location": "/usb_power_management/linux/devcontrol.sh:1-8"
    },
    "1905": {
        "file_id": 264,
        "content": "This script turns on power management for all USB devices, sets the power level to \"on\", disables hardware LPM for USB 3.0, and disables USB 3.1 hardware LPM.",
        "type": "comment"
    },
    "1906": {
        "file_id": 265,
        "content": "/usb_power_management/windows/README.md",
        "type": "filepath"
    },
    "1907": {
        "file_id": 265,
        "content": "Enables USB devices to remain active and prevents Windows from automatically suspending them.",
        "type": "summary"
    },
    "1908": {
        "file_id": 265,
        "content": "[disable usb selective suspend](https://www.tenforums.com/tutorials/73187-turn-off-usb-selective-suspend-windows-10-a.html)\nuninstall uas driver from device manager? (nope. it will block access)\n设备管理器 -> 通用串行总线控制器 -> 设备 -> 电源管理 -> 取消复选框",
        "type": "code",
        "location": "/usb_power_management/windows/README.md:1-5"
    },
    "1909": {
        "file_id": 265,
        "content": "Enables USB devices to remain active and prevents Windows from automatically suspending them.",
        "type": "comment"
    },
    "1910": {
        "file_id": 266,
        "content": "/use_logging.py",
        "type": "filepath"
    },
    "1911": {
        "file_id": 266,
        "content": "The code demonstrates various logging implementations using Python libraries, including forced logging with optional overriding, executing an illegal debug log statement, and examples of using structlog and loguru for logging information.",
        "type": "summary"
    },
    "1912": {
        "file_id": 266,
        "content": "# test 1\nimport logging\nimport sys\n# can format arbitrary object into string.\ndef get_logging_level():\n    logger = logging.getLogger(\"mylogger\")  # not root?\n    logging_level = logger.getEffectiveLevel()\n    level_name = logging.getLevelName(logging_level)\n    # logging_level = logging.getLogger().getEffectiveLevel()\n    logger.critical(\"LOGGING LEVEL: %s (%d)\", level_name, logging_level)\n    return logging_level\nget_logging_level()\nlogging.warning(\"abc %s\", (1, 2))  # default level: warning.\n# can only set once, unless using \"force\" to override.\nlogging.basicConfig(\n    level=logging.INFO,\n    stream=sys.stdout,\n    format=\"%(asctime)s %(levelname)s:%(message)s\",\n    force=True,\n)\n# logging.basicConfig(level=logging.INFO, stream=sys.stdout) # suppress debug output.\n# level priority: DEBUG < INFO < WARNING < ERROR < CRITICAL\n# logging.basicConfig(level=logging.DEBUG, stream=sys.stdout)\nprint(\"def\")\nlogging.debug(\"abc\")\nprint(\"2 abc\")\n# cannot override?\n# logging.basicConfig(level=logging.DEBUG, stream=sys.stdo",
        "type": "code",
        "location": "/use_logging.py:1-36"
    },
    "1913": {
        "file_id": 266,
        "content": "The code is setting up logging configuration and testing the logging level. It starts by importing necessary libraries, then defines a function to get the effective logging level. The logger object is created with the name \"mylogger\". The script outputs the current logging level and sets the basic configuration for logging. The default level is warning, and the format of the log messages is set. Finally, it prints some debug and normal level logs.",
        "type": "comment"
    },
    "1914": {
        "file_id": 266,
        "content": "ut, force=True) # force overriding. you can set it somewhere.\nlogging.debug(\"abc\", (1, 2))  # though illegal, will be executed as well.\nlogging.info(\"abc %s\", {1: []})\n# test 2\nimport structlog\nslogger: structlog.stdlib.BoundLogger = structlog.get_logger()\nlog = slogger.bind(val = 1)\nlog.bind(bar = 1)\nlog.info(\"anything %s\", (1,2))\n# test 3\nimport loguru\nulogger = loguru.logger\nmylogger = ulogger.bind(foo = 1)\nmylogger.info(\"anything {}\", (1,)) # use {} instead of %\nulogger.critical(\"something wrong {}\", (1,2))",
        "type": "code",
        "location": "/use_logging.py:36-60"
    },
    "1915": {
        "file_id": 266,
        "content": "This code demonstrates various logging implementations using Python libraries. It includes forced logging with optional overriding, executing an illegal debug log statement, and examples of using structlog and loguru for logging information.",
        "type": "comment"
    }
}