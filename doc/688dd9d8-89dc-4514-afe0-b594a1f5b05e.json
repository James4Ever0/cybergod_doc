{
    "summary": "The code uses mock testing, lru_cached, and API functions for verification. It defines a class \"MyClass\" with properties age, factors (commented), my_list, and creates a sample tensor function.",
    "details": [
        {
            "comment": "Importing the mypy.api as api.\nMock testing can be used for verification and compatibility checking between mock-based and non-mock operations. \nUsing lru_cached to speed up overheads for mock functions.\nCalling the api.run function with command line arguments. \nImporting TensorFlow and tensor_annotations.axes from DeepMind.\nUsing Annotated type from typing_extensions to define Batch and Time axes.\nDefining a new type, MyAxis, using NewType from typing_extensions.\nImporting pycontract for code contract implementation.\nDefining the my_function with its parameters and return types.\nCreating sample_batch function that returns a tensor of type ttf.Tensor2[uint8, Time, Batch]. \nUsing Annotated type from typing_extensions to define Gt type.",
            "location": "\"/media/root/Toshiba XG3/works/cybergod_doc/src/mypy_check.py\":0-38",
            "content": "import mypy.api as api\n# you may use mock testing, similar to symbolic execution.\n# you may ensure compatibility between non-mock based operation, or ensure all functions are mock calls.\n# mock functions shall be lru_cached, to speedup overheads.\nresult = api.run(...)  # commandline args.\nimport tensorflow as tf\nfrom tensor_annotations import axes # by deepmind.\nimport tensor_annotations.tensorflow as ttf\nfrom typing import NewType, List\nfrom typing_extensions import Annotated\nuint8 = ttf.uint8\nBatch, Time = Annotated[axes.Batch, 3], Annotated[axes.Time, 5] # problem is, how to share this along with function calls?\nMyAxis = NewType(\"MyAxis\", axes.Axis)\n# from pycontract import contract\n# @contract\n# def my_function(a, b):\n#     \"\"\" Function description.\n#         :type a: int,>0\n#         :type b: list[N],N>0\n#         :rtype: list[N]\n#     \"\"\"\n#     ...\n# def sample_batch() -> ttf.Tensor2[uint8, Time, Batch]:\n#     return tf.zeros((3, 5))\nfrom typing_extensions import Annotated\nfrom annotated_types import Gt,"
        },
        {
            "comment": "The code defines a class \"MyClass\" with properties age, factors (commented out), and my_list. Age is valid if greater than 18, factors is supposed to be a list of prime numbers but commented out, and my_list is a list of integers between 0 and 10 length.",
            "location": "\"/media/root/Toshiba XG3/works/cybergod_doc/src/mypy_check.py\":38-47",
            "content": " Len, Predicate\nclass MyClass:\n    age: Annotated[int, Gt(18)]                         # Valid: 19, 20, ...\n                                                        # Invalid: 17, 18, \"19\", 19.0, ...\n    # factors: List[Annotated[int, Predicate(is_prime)]]  # Valid: 2, 3, 5, 7, 11, ...\n    #                                                     # Invalid: 4, 8, -2, 5.0, \"prime\", ...\n    my_list: Annotated[List[int], Len(0, 10)]           # Valid: [], [10, 20, 30, 40, 50]\n                                                        # Invalid: (1, 2), [\"abc\"], [0] * 20"
        }
    ]
}