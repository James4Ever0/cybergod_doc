{
    "summary": "The code manages client processes and communicates with a server, monitoring their status, killing dead clients, logging actions, and sending heartbeats.",
    "details": [
        {
            "comment": "This code is a part of a kill server that monitors running processes and can terminate them if necessary. It checks the status of clients, their PIDs, and roles, and kills any dead clients. It also logs relevant information for each client.",
            "location": "\"/media/root/Toshiba XG3/works/cybergod_doc/src/basic_interactive_program_emulation_and_image_with_docker_support/kill_server.py\":0-29",
            "content": "# kill dead process by pid and remove them from beat server\n# the kill server must emit beat signals, and can kill other processes to prove its effectiveness\n# maybe we need to elevate\n# import elevate\nfrom beat_common import *\nimport os\nimport signal\nimport uuid\nfrom log_common import *\nkiller_pid = os.getpid()\nkiller_uuid = str(uuid.uuid4())\ndef commit_kill(client_uuid: str, client_pid: int, client_role:str):\n    kill_time = heartbeat_base_nocache(client_uuid, \"kill\", client_pid, client_role)\n    print(f\"commit kill for client {client_uuid} (pid: {client_pid}) at {kill_time}\")\ndef kill_dead_process():\n    dead_clients = []\n    info = query_info()\n    client_info= info['info']\n    for client_uuid, client_info_dict in client_info.items():\n        client_status = client_info_dict['status']\n        client_pid = client_info_dict['pid']\n        client_role = client_info_dict['role']\n        if client_status is False:\n            print(f\"client {client_uuid} is dead.\")\n            if client_pid == killer_pid:\n     "
        },
        {
            "comment": "Code is for managing client processes and communicating with a server. It keeps track of dead clients, attempts to kill them using their PIDs, and logs the actions. The `kill_server_beat()` function sends heartbeats to the server and the main loop continuously kills dead processes and sends heartbeats.",
            "location": "\"/media/root/Toshiba XG3/works/cybergod_doc/src/basic_interactive_program_emulation_and_image_with_docker_support/kill_server.py\":29-56",
            "content": "           print(\"cannot suicide\")\n                continue\n            dead_clients.append((client_uuid, client_pid, client_role))\n    for client_uuid, client_pid, client_role in dead_clients:\n        print(\"killing client:\", client_uuid)\n        try:\n            kill_by_pid(client_pid)\n        except ProcessLookupError:\n            print(f'client {client_uuid} (pid: {client_pid}) is already killed')\n        except:\n            log_and_print_unknown_exception()\n        # remove from history.\n        commit_kill(client_uuid, client_pid, client_role)\ndef kill_server_beat(action = 'heartbeat'):\n    atime = heartbeat_base(killer_uuid, action, killer_pid, 'killer')\n    print(f\"killer {killer_uuid} beat at:\", atime)\nimport time\nif __name__ == \"__main__\":\n    print(f\"killer {killer_uuid} started (pid: {killer_pid})\")\n    kill_server_beat('hello')\n    while True:\n        kill_dead_process()\n        time.sleep(1)\n        kill_server_beat()"
        }
    ]
}