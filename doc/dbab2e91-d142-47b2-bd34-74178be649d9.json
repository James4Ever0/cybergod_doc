{
    "summary": "The code reads text files, parses the data into pandas DataFrames, handles errors such as null strings and short table entries, and filters data for HID keycodes before writing it to a CSV or JSON file.",
    "details": [
        {
            "comment": "This code reads a text file, parses its lines, and stores the data in a pandas DataFrame. It checks for null strings (empty lines) and table entries that are less than 30 characters long. The headers are counted, and if a line is too long, the header index becomes -2. Finally, it prints the DataFrame and writes it to a CSV file.",
            "location": "\"/media/root/Toshiba XG3/works/cybergod_doc/src/hardware_capture_hid_power_control/parse_hid_keycodes.py\":0-41",
            "content": "input_path = \"./resources/decompressed/Kcom3\u8d44\u6599/keys.txt\"\nfrom typing import Annotated\n# import beartype\nfrom beartype.vale import Is\nfrom beartype.door import is_bearable\nnull_string = Annotated[str, Is[lambda s: len(s) == 0]]\ntable_entry = Annotated[str, Is[lambda s: len(s) < 30]]\ntable_header_count = 7\ntable_rows = []\nrow = []\nheader_index = -1\nwith open(input_path, \"r\", encoding=\"utf-8\") as f:\n    for line in f.readlines():\n        line = line.strip()\n        if is_bearable(line, null_string):\n            if header_index == table_header_count - 1:\n                table_rows.append(row.copy())\n            row = []\n            header_index = -1\n        elif is_bearable(line, table_entry):\n            if header_index != -2:\n                header_index += 1\n                row.append(line)\n        else:  # too long\n            header_index = -2\n# import rich\n# rich.print(table_rows)\nimport pandas\ndf = pandas.DataFrame(table_rows[1:], columns=table_rows[0])\nprint(df)\ndf.to_csv(outpath := \"keys.csv\")\nprint(\"write to: "
        },
        {
            "comment": "This code parses HID keycodes and filters the dataframe based on HID Usage ID, creating a new dataframe containing only the \"Key Name\" and \"HID Usage ID\" columns. It then writes this filtered data to a JSON file named \"keys.json\".",
            "location": "\"/media/root/Toshiba XG3/works/cybergod_doc/src/hardware_capture_hid_power_control/parse_hid_keycodes.py\":41-73",
            "content": "\" + outpath)\nfrom beartype.door import is_bearable\nfrom typing import Annotated\nfrom beartype.vale import Is\nstring2 = Annotated[str, Is[lambda s: len(s) == 2]]\n# Key Name\n# HID Usage ID\nfrom functools import partial\nnew_usage_id = df[\"HID Usage ID\"].apply(partial(is_bearable, hint=string2))\nprint(\"new usage id?\")\nprint(new_usage_id)\nnew_df = df[new_usage_id]\nselect_new_df = new_df[[\"Key Name\", \"HID Usage ID\"]]\nprint(\"____\")\nprint(select_new_df)\n# print(select_new_df.head())\n# for index, row in new_df.iterrows():\n#     print(\"_______________________________________________________________\")\n#     print(\"index?\", index,sep=\"\\n\")\n#     print()\n#     print(\"row?\", row,sep=\"\\n\")\n#     print()\n#     breakpoint()\nselect_new_df.to_json(json_outpath := \"keys.json\", orient=\"records\", indent=4)\nprint(\"write json to: \" + json_outpath)\n# print(_json)"
        }
    ]
}