{
    "summary": "The code uses pynput library to set up listeners for keyboard and mouse events, storing them in a list called HIDEvents. It records the event details based on timestep configuration from a config file and writes them to a JSON lines file, but Windows' zooming factor may affect accuracy.",
    "details": [
        {
            "comment": "This code sets up listeners for both keyboard and mouse events, storing the event details in a list called HIDEvents. It uses the pynput library to handle input from the keyboard and mouse. The timestep configuration is loaded from the config file to determine how frequently events are recorded. However, there seems to be a problem related to Windows' zooming factor which might affect the accuracy of the recorded events.",
            "location": "\"/media/root/Toshiba XG3/works/cybergod_doc/src/keyboard_and_mouse.py\":0-43",
            "content": "from datetime import datetime\nfrom pynput import keyboard\nHIDEvents = []\nfrom config import timestep  # this will be sufficient?\n# problem is the windows zooming factor.\n# is it really the problem?\ndef on_press(key):\n    if type(key) != str:\n        key = str(key)\n    HIDEvents.append(('key_press', key))\ndef on_release(key):\n    if type(key) != str:\n        key = str(key)\n    HIDEvents.append(('key_release', key))\nkeyboard_listener = keyboard.Listener(on_press=on_press, on_release=on_release)\nkeyboard_listener.start()\nfrom pynput import mouse\ndef on_move(x: int, y: int):\n    HIDEvents.append((\"mouse_move\", [x, y]))\ndef on_click(x: int, y: int, button: mouse.Button, pressed: bool):\n    HIDEvents.append((\"mouse_click\", [x, y, str(button), pressed]))\ndef on_scroll(x: int, y: int, dx: int, dy: int):\n    HIDEvents.append((\"mouse_scroll\", [x, y, dx, dy]))\n# # ...or, in a non-blocking fashion:\nlistener = mouse.Listener(on_move=on_move, on_click=on_click, on_scroll=on_scroll)\nlistener.start()\n# you may start that non-b"
        },
        {
            "comment": "Starts a looping-forever thread for writing states to file. Imports required modules, sets the loop count, and opens a JSON lines file for writing. Within the loop, it waits for a certain period (timestep), captures the current state (HIDEvents dictionary), writes it to the file, and resets the HIDEvents and mouseloc variables.",
            "location": "\"/media/root/Toshiba XG3/works/cybergod_doc/src/keyboard_and_mouse.py\":43-67",
            "content": "locking. start some looping-forever thread for writing states to file.\nimport time\n# import pyautogui\n# import datetime\nloopCount = 500\nimport jsonlines\nprint(\"RECORDING START\")\nfrom config import filePath\nimport datetime\nworld_start = datetime.datetime.now()\nwith jsonlines.open(filePath, 'w') as w:\n    for _ in range(loopCount):\n        time.sleep(timestep)\n        # as for screenshot, use mss instead of screenshot.\n        #     screenshot = pyautogui.screenshot()\n        # shall you mark the time here.\n        state = dict(HIDEvents=HIDEvents)  # also the image!\n        print(\"STATE?\", state)\n        w.write(state)\n        HIDEvents = []\n        mouseloc = []"
        }
    ]
}