{
    "summary": "The code automates VM management by running bash scripts to stop, prepare directories, restore and start the VM, checks for new recordings within a time threshold, ensures the VM is running or aborts if not, and reboots if necessary.",
    "details": [
        {
            "comment": "This code is running multiple bash scripts in a loop. It first stops the VM, prepares two WebDAV directories, restores the VM, and starts the VM. If the script encounters an error, it will wait for 15 seconds before aborting or 60 seconds before quitting the process. Each script execution is recorded in the \"codes\" list.",
            "location": "\"/media/root/Toshiba XG3/works/cybergod_doc/src/ubuntu_qemu_utm_arm_record/kali_vbox_control/kali_vbox_main_loop.py\":0-40",
            "content": "from exec_vm_if_locked import exec_vm_if_locked\nimport time\nimport os\nimport progressbar\nseconds = 60*5\nrestore_vm = \"restore_vm.sh\"\nstop_vm = \"stop_vm.sh\"\nstart_vm = \"start_vm.sh\"\nkali_prepare_two_webdav_dirs = \"../kali_prepare_two_webdav_dirs.sh\"\nABORT_THRESHOLD = 15\nQUIT_THRESHOLD = 60\ndef run_bash_script(script_path):\n    print(\"Excuting bash script: %s\" % script_path)\n    command = f\"bash {script_path}\"\n    return os.system(command)\n# scripts = [stop_vm, kali_prepare_two_webdav_dirs, restore_vm] # restoration will make vm start?\nscripts = [stop_vm, kali_prepare_two_webdav_dirs, restore_vm, start_vm]\nwhile True:\n    os.system(\"cd .\")\n    os.system(\"rm nohup.out\")\n    codes = []\n    for script in scripts:\n        while True:\n            code = run_bash_script(script)\n            time.sleep(1)\n            if script != start_vm:\n                break\n            else:\n                if code != 0:\n                    continue\n                else:\n                    break\n        codes.append(code)\n    print()\n    fo"
        },
        {
            "comment": "This code is checking if there are any error codes in the list of script exit codes. If there are, it prints a message and displays each script's exit code before waiting for a specified number of seconds. It also periodically checks for new recordings and aborts if no new recording appears within a certain time threshold.",
            "location": "\"/media/root/Toshiba XG3/works/cybergod_doc/src/ubuntu_qemu_utm_arm_record/kali_vbox_control/kali_vbox_main_loop.py\":40-67",
            "content": "r index, script in enumerate(scripts):\n        print(f'{script} EXIT CODE:', codes[index])\n    # if any(codes):\n    #     print()\n    #     print(\"HAS ERROR CODE!\")\n    #     for index, script in enumerate(scripts):\n    #         print(f'{script} EXIT CODE:', codes[index])\n    #     time.sleep(1)\n    #     continue\n    # CAN YOU DO THIS WITHOUT INTERRUPTING ME?\n    print(\"WAITING {} SECONDS...\".format(seconds))\n    abort = 0\n    quit = 0\n    old_rec_paths = os.listdir(\n        \"/media/root/Toshiba XG3/works/agi_computer_control/recordings\")\n    for _ in progressbar.progressbar(range(seconds)):\n        # you just don't wait...\n        paths = os.listdir(\"/tmp/.X11-unix\")\n        rec_paths = os.listdir(\n            \"/media/root/Toshiba XG3/works/agi_computer_control/recordings\")\n        if rec_paths == old_rec_paths:\n            quit += 1\n            if quit > QUIT_THRESHOLD:  # thirty secs.\n                print(\"ABORTING! NOT RECORDING.\")\n                break\n        else:\n            quit=0\n            old_rec"
        },
        {
            "comment": "This code checks if a virtual machine (VM) is running and aborts the script if it's not. If the VM is running, it checks if it needs to be rebooted or not before continuing. If the number of abort attempts exceeds a certain threshold, it prints \"ABORTING! VM IS NOT RUNNING.\" and breaks the loop.",
            "location": "\"/media/root/Toshiba XG3/works/cybergod_doc/src/ubuntu_qemu_utm_arm_record/kali_vbox_control/kali_vbox_main_loop.py\":67-83",
            "content": "_paths = rec_paths.copy()\n        target_path = \"X10\"  # where virtualbox runs.\n        vm_running = target_path in paths\n        if not vm_running:\n            abort += 1\n        else:\n            reboot = exec_vm_if_locked()\n            if reboot:\n                abort += 1\n            else:\n                abort = 0\n        if abort > ABORT_THRESHOLD:\n            print(\"ABORTING! VM IS NOT RUNNING.\")\n            break\n        time.sleep(1)\n    print()"
        }
    ]
}