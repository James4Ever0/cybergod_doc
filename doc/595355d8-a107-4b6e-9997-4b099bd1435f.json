{
    "summary": "Code comments:\n1. Declare dimension variables (e.g., 'Batch(b):32') and use the shorthand ('b') in the rest of the code.\n2. Create tensors using dimension variables as integers.\n3. Perform tensor transformations, keeping track of named shapes ('b,c,h//2,w//2').\n4. Check assertions: compare dynamic shapes with declared shapes (symbolic).\n5. Use size_assert to check selected dimensions.\n6. Torch tensor is created but not statically checked for correct shape due to names attribute.",
    "details": [
        {
            "comment": "Code comments:\n1. Declare dimension variables (e.g., 'Batch(b):32') and use the shorthand ('b') in the rest of the code.\n2. Create tensors using dimension variables as integers.\n3. Perform tensor transformations, keeping track of named shapes ('b,c,h//2,w//2').\n4. Check assertions: compare dynamic shapes with declared shapes (symbolic).\n5. Use size_assert to check selected dimensions.\n6. Torch tensor is created but not statically checked for correct shape due to names attribute.",
            "location": "\"/media/root/Toshiba XG3/works/cybergod_doc/src/tsalib_test.py\":0-20",
            "content": "from tsalib import dim_vars as dvs, size_assert\nimport tensorflow as tf\nimport torch\n# declare dimension variables. e.g., full name 'Batch', shorthand 'b', length 32.\n# Simply use the shorthand 'b' in rest of the code.\nB, C, H, W = dvs('Batch(b):32 Channels(c):3 Height(h):256 Width(w):256') \n...\n# create tensors using dimension variables (interpret dim vars as integers)\nx: 'bchw' = torch.randn(B, C, H, W)\nx: 'bchw' = tf.get_variable(\"x\", shape=(B, C, H, W), initializer=tf.random_normal_initializer())\n# perform tensor transformations, keep track of named shapes\nx: 'b,c,h//2,w//2' = maxpool(x) \n# check assertions: compare dynamic shapes with declared shapes\n# assertions are 'symbolic': don't change even if declared shapes change\nassert x.size() == (B, C, H // 2, W // 2)\n#or, check selected dimensions\nsize_assert(x.size(), (B,C,H//2,W//2), dims=[1,2,3])\nmytensor = torch.randn(1, 2, 2, 3 , names=('N', 'C', 'H', 'W')) # still, not annotated. cannot check statically?"
        }
    ]
}